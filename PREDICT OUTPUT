a = [23, 34, 45, 56, ["rose", "orange", "dark"]]
j = 0
for i in range(len(a)):
    if j == len(a[4]):
        break
    print( a[4][j]  *  2)
    j = j + 1
----------------------2-----------------------------
def ram(n):
    for i in range(20):
        if(i%n ==3):
            return
        else:
            print("Hai")
    print(" Are u Ok?")
    
ram(4)
-----------------------3-------------------------
def nmamit():
    nmamit_1()
    
def nmamit_1():
    print("Tiger")
    for i in "yg":
      nmamit_2(10)

def nmamit_2(n):
    n=n+5
    print(n*2)
------------------------4------------------------
def q(n):
    if n == 1:
        return 3
    else:
        return q(n // 2)

print(q(120))
-------------------------5---------------------
def h(n):
    if n % 2 == 0:
        return n // 2
    else:
        return 3 * n + 1

result = 7
steps = 0
while result != 1:
    result = h(result)
    steps += 1

print(steps)

--------------------------6---------------
numbers = [1, 3, 5, 7, 9, 2, 4, 6, 8]
s = 0
for num in numbers:
    if num % 2 == 0:
        continue
    s += num
    if s > 15:
        break

print(s)
---------------------------7---------------
list_numbers = [1, 2, 2, 3, 4, 4, 4, 5, 6]
u = set(list_numbers)
for num in u:
    if num % 2 == 0:
        list_numbers.remove(num)

print("List after some opertion:", list_numbers)
-------------------------8---------------------------
a = 15
b = 8
c = 20
result = 0
if a > b and a < c:
    result += a
if b < a or b > c:
    result += b
if not (c < a):
    result += c
if (a % 2 == 0) and (b % 2 == 0):
    result -= a
else:
    result += b

print("Final result:", result)
---------------------------------------
for i in range(1, 6):
    for j in range(1, i + 1):
        if j % 2 == 0:
            print('X', end='')
        else:
            print('O', end='')
    print()
---------------------------------------
word = 'GKNUDT'
for i in range(len(word)):
    for j in range(i+1):
        print(chr(ord(word[j]) + 1), end='')
    print()
------------------------------------
