class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def add_node(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node

    def remove_node(self, key):
        head = self.head

        if head is not None:
            if head.data == key:
                self.head = head.next
                head = None
                return

        prev = None
        while head is not None:
            if head.data == key:
                break
            prev = head
            head = head.next

        if head == None:
            return

        prev.next = head.next
        head = None

    def display(self):
        nodes = []
        current_node = self.head
        while current_node:
            nodes.append(current_node.data)
            current_node = current_node.next
        print(" -> ".join(map(str, nodes)))

# Example usage
ll = LinkedList()
ll.add_node(1)
ll.add_node(2)
ll.add_node(3)
ll.display()  # Output: 1 -> 2 -> 3

ll.remove_node(2)
ll.display()  # Output: 1 -> 3
